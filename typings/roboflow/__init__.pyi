"""
This type stub file was generated by pyright.
"""

import json
import os
import sys
import time
import requests
from getpass import getpass
from pathlib import Path
from urllib.parse import urlparse
from roboflow.adapters import rfapi
from roboflow.config import API_URL, APP_URL, DEMO_KEYS, load_roboflow_api_key
from roboflow.core.project import Project
from roboflow.core.workspace import Workspace
from roboflow.models import CLIPModel, GazeModel
from roboflow.util.general import write_line

__version__ = ...
def check_key(api_key, model, notebook, num_retries=...): # -> str | Any:
    ...

def login(workspace=..., force=...): # -> None:
    ...

active_workspace = ...
def initialize_roboflow(the_workspace=...): # -> Workspace:
    """High level function to initialize Roboflow.

    Args:
        the_workspace: the workspace url to initialize.
            If None, the default workspace will be used.

    Returns:
        None
    """
    ...

def load_model(model_url): # -> InferenceModel | None:
    """High level function to load Roboflow models.

    Args:
        model_url: the model url to load.
            Must be from either app.roboflow.com or universe.roboflow.com

    Returns:
        the model object to use for inference
    """
    ...

def download_dataset(dataset_url, model_format, location=...): # -> Dataset:
    """High level function to download data from Roboflow.

    Args:
        dataset_url: the dataset url to download.
            Must be from either app.roboflow.com or universe.roboflow.com
        model_format: the format the dataset will be downloaded in
        location: the location the dataset will be downloaded to

    Returns:
        The dataset object with location available as dataset.location
    """
    ...

class Roboflow:
    def __init__(self, api_key=..., model_format=..., notebook=...) -> None:
        ...
    
    def auth(self): # -> Self:
        ...
    
    def workspace(self, the_workspace=...): # -> Workspace:
        ...
    
    def project(self, project_name, the_workspace=...): # -> Project:
        """Function that takes in the name of the project and returns the project object
        :param project_name api_key: project name
        :param the_workspace workspace name
        :return project object
        """
        ...
    
    def __str__(self) -> str:
        """to string function"""
        ...
    


