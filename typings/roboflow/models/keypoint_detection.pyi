"""
This type stub file was generated by pyright.
"""

from typing import Optional
from roboflow.models.inference import InferenceModel

class KeypointDetectionModel(InferenceModel):
    """
    Run inference on a classification model hosted on Roboflow or served through
        Roboflow Inference.
    """
    def __init__(self, api_key: str, id: str, name: Optional[str] = ..., version: Optional[str] = ..., local: Optional[str] = ...) -> None:
        """
        Create a ClassificationModel object through which you can run inference.

        Args:
            api_key (str): private roboflow api key
            id (str): the workspace/project id
            name (str): is the name of the project
            version (str): version number
            local (str): localhost address and port if pointing towards local inference engine
            colors (dict): colors to use for the image
            preprocessing (dict): preprocessing to use for the image

        Returns:
            ClassificationModel Object
        """
        ...
    
    def predict(self, image_path, hosted=...): # -> PredictionGroup:
        """
        Run inference on an image.

        Args:
            image_path (str): path to the image you'd like to perform prediction on
            hosted (bool): whether the image you're providing is hosted on Roboflow

        Returns:
            PredictionGroup Object

        Example:
            >>> import roboflow

            >>> rf = roboflow.Roboflow(api_key="")

            >>> project = rf.workspace().project("PROJECT_ID")

            >>> model = project.version("1").model

            >>> prediction = model.predict("YOUR_IMAGE.jpg")
        """
        ...
    
    def load_model(self, name, version): # -> None:
        """
        Load a model.

        Args:
            name (str): is the name of the model you'd like to load
            version (int): version number
        """
        ...
    
    def __str__(self) -> str:
        """
        String representation of classification object
        """
        ...
    


