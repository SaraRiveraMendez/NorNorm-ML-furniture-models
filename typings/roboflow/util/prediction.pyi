"""
This type stub file was generated by pyright.
"""

def plot_image(image_path): # -> tuple[Figure, Axes]:
    """
    Helper method to plot image

    :param image_path: path of image to be plotted (can be hosted or local)
    :return:
    """
    ...

def plot_annotation(axes, prediction=..., stroke=..., transparency=..., colors=...): # -> None:
    """
    Helper method to plot annotations

    :param axes: Matplotlib axes
    :param prediction: prediction dictionary from the Roboflow API
    :param stroke: line width to use when drawing rectangles and polygons
    :param transparency: alpha transparency of masks for semantic overlays
    :return:
    """
    ...

class Prediction:
    def __init__(self, json_prediction, image_path, prediction_type=..., colors=...) -> None:
        """
        Generalized Prediction for both Object Detection and Classification Models

        :param json_prediction:
        :param image_path:
        """
        ...
    
    def json(self): # -> Any:
        ...
    
    def plot(self, stroke=...): # -> None:
        ...
    
    def save(self, output_path=..., stroke=..., transparency=...): # -> None:
        """
        Annotate an image with predictions and save it

        :param output_path: filename to save the image as
        :param stroke: line width to use when drawing rectangles and polygons
        :param transparency: alpha transparency of masks for semantic overlays
        """
        ...
    
    def __str__(self) -> str:
        """
        :return: JSON formatted string of prediction
        """
        ...
    
    def __getitem__(self, key):
        """

        :param key:
        :return:
        """
        ...
    
    __repr__ = ...


class PredictionGroup:
    def __init__(self, image_dims, image_path, *args) -> None:
        """
        :param args: The prediction(s) to be added to the prediction group
        """
        ...
    
    def add_prediction(self, prediction=...): # -> None:
        """

        :param prediction: Prediction to add to the prediction group
        """
        ...
    
    def plot(self, stroke=...): # -> None:
        ...
    
    def save(self, output_path=..., stroke=...): # -> None:
        ...
    
    def __str__(self) -> str:
        """

        :return:
        """
        ...
    
    def __getitem__(self, index):
        ...
    
    def __len__(self): # -> int:
        ...
    
    def json(self): # -> dict[str, list[Any]]:
        ...
    
    @staticmethod
    def create_prediction_group(json_response, image_path, prediction_type, image_dims, colors=...): # -> PredictionGroup:
        """
        Method to create a prediction group based on the JSON Response

        :param prediction_type:
        :param json_response: Based on Roboflow JSON Response from Inference API
        :param model:
        :param image_path:
        :param image_dims:
        :return:
        """
        ...
    


