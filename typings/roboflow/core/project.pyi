"""
This type stub file was generated by pyright.
"""

from typing import Dict, List, Optional

ACCEPTED_IMAGE_FORMATS = ...
def custom_formatwarning(msg, *args, **kwargs): # -> str:
    ...

class Project:
    """
    A Roboflow Project.
    """
    def __init__(self, api_key: str, a_project: dict, model_format: Optional[str] = ...) -> None:
        """
        Create a Project object that represents a Project associated with a Workspace.

        Args:
            api_key (str): private roboflow api key
            a_project (dict): the project information dictionary
            model_format (str): the model format of the project

        Example:
            >>> import roboflow

            >>> rf = roboflow.Roboflow(api_key="")

            >>> project = rf.workspace().project("PROJECT_ID")
        """
        ...
    
    def get_version_information(self): # -> Any:
        """
        Retrieve all versions of a project.

        Returns:
            A list of all versions of the project.

        Example:
            >>> import roboflow

            >>> rf = roboflow.Roboflow(api_key="")

            >>> project = rf.workspace().project("PROJECT_ID")

            >>> version_info = project.get_version_information()
        """
        ...
    
    def list_versions(self): # -> None:
        """
        Print out versions for that specific project.

        Example:
            >>> import roboflow

            >>> rf = roboflow.Roboflow(api_key="")

            >>> project = rf.workspace().project("PROJECT_ID")

            >>> project.list_versions()
        """
        ...
    
    def versions(self): # -> list[Any]:
        """
        Return all versions in the project as Version objects.

        Returns:
            A list of Version objects.

        Example:
            >>> import roboflow

            >>> rf = roboflow.Roboflow(api_key="")

            >>> project = rf.workspace().project("PROJECT_ID")

            >>> versions = project.versions()
        """
        ...
    
    def generate_version(self, settings): # -> int:
        """
        Generate a version of a dataset hosted on Roboflow.

        Args:
            settings: A Python dict with augmentation and preprocessing keys and specifications for generation. These settings mirror capabilities available via the Roboflow UI.
                    For example:
                        {
                            "augmentation": {
                                "bbblur": { "pixels": 1.5 },
                                "bbbrightness": { "brighten": true, "darken": false, "percent": 91 },
                                "bbcrop": { "min": 12, "max": 71 },
                                "bbexposure": { "percent": 30 },
                                "bbflip": { "horizontal": true, "vertical": false },
                                "bbnoise": { "percent": 50 },
                                "bbninety": { "clockwise": true, "counter-clockwise": false, "upside-down": false },
                                "bbrotate": { "degrees": 45 },
                                "bbshear": { "horizontal": 45, "vertical": 45 },
                                "blur": { "pixels": 1.5 },
                                "brightness": { "brighten": true, "darken": false, "percent": 91 },
                                "crop": { "min": 12, "max": 71 },
                                "cutout": { "count": 26, "percent": 71 },
                                "exposure": { "percent": 30 },
                                "flip": { "horizontal": true, "vertical": false },
                                "hue": { "degrees": 180 },
                                "image": { "versions": 32 },
                                "mosaic": true,
                                "ninety": { "clockwise": true, "counter-clockwise": false, "upside-down": false },
                                "noise": { "percent": 50 },
                                "rgrayscale": { "percent": 50 },
                                "rotate": { "degrees": 45 },
                                "saturation": { "percent": 50 },
                                "shear": { "horizontal": 45, "vertical": 45 }
                            },
                            "preprocessing": {
                                "auto-orient": true,
                                "contrast": { "type": "Contrast Stretching" },
                                "filter-null": { "percent": 50 },
                                "grayscale": true,
                                "isolate": true,
                                "remap": { "original_class_name": "new_class_name" },
                                "resize": { "width": 200, "height": 200, "format": "Stretch to" },
                                "static-crop": { "x_min": 10, "x_max": 90, "y_min": 10, "y_max": 90 },
                                "tile": { "rows": 2, "columns": 2 }
                            }
                        }

        Returns:
            int: The version number that is being generated.

        Example:
            >>> import roboflow

            >>> rf = roboflow.Roboflow(api_key="")

            >>> project = rf.workspace().project("PROJECT_ID")

            >>> versions = project.generate_version(settings={...})
        """
        ...
    
    def train(self, new_version_settings: Optional[Dict] = ..., speed=..., checkpoint=..., plot_in_notebook=...): # -> InferenceModel:
        """
        Ask the Roboflow API to train a previously exported version's dataset.

        Args:
            speed: Whether to train quickly or accurately. Note: accurate training is a paid feature. Default speed is `fast`.
            checkpoint: A string representing the checkpoint to use while training
            plot: Whether to plot the training loss curve. Default is False.

        Returns:
            True

        Raises:
            RuntimeError: If the Roboflow API returns an error with a helpful JSON body
            HTTPError: If the Network/Roboflow API fails and does not return JSON

        Example:
            >>> import roboflow

            >>> rf = roboflow.Roboflow(api_key="")

            >>> project = rf.workspace().project("PROJECT_ID")

            >>> version = project.version(1)

            >>> version.train()
        """
        ...
    
    def version(self, version_number: int, local: Optional[str] = ...): # -> Version:
        """
        Retrieves information about a specific version and returns a Version() object.

        Args:
            version_number (int): the version number that you want to retrieve
            local (str): specifies the localhost address and port if pointing towards local inference engine

        Returns:
            Version() object
        """
        ...
    
    def check_valid_image(self, image_path: str) -> bool:
        """
        Check if an image is valid. Useful before attempting to upload an image to Roboflow.

        Args:
            image_path (str): path to image you'd like to check

        Returns:
            bool: whether the image is valid or not
        """
        ...
    
    def upload(self, image_path: str, annotation_path: Optional[str] = ..., hosted_image: bool = ..., image_id: Optional[str] = ..., split: str = ..., num_retry_uploads: int = ..., batch_name: Optional[str] = ..., tag_names: Optional[List[str]] = ..., is_prediction: bool = ..., **kwargs): # -> None:
        """
        Upload an image or annotation to the Roboflow API.

        Args:
            image_path (str): path to image you'd like to upload
            annotation_path (str): path to the annotation file. If not provided, the image will be uploaded without annotation.
                Special case: in classification projects, this can instead be a class name. e.g. "dog".
            hosted_image (bool): whether the image is hosted
            image_id (str): id of the image
            split (str): which split to upload to - "train", "valid" or "test"
            num_retry_uploads (int): how many times to retry upload on failure
            batch_name (str): name of batch to upload to within project
            tag_names (list[str]): tags to be applied to an image
            is_prediction (bool): whether the annotation data is a prediction rather than ground truth

        Example:
            >>> import roboflow

            >>> rf = roboflow.Roboflow(api_key="")

            >>> project = rf.workspace().project("PROJECT_ID")

            >>> project.upload(image_path="YOUR_IMAGE.jpg")
        """
        ...
    
    def upload_image(self, image_path=..., hosted_image=..., split=..., num_retry_uploads=..., batch_name=..., tag_names: Optional[List[str]] = ..., sequence_number=..., sequence_size=..., **kwargs): # -> tuple[Any | None, float, int]:
        ...
    
    def save_annotation(self, annotation_path=..., annotation_labelmap=..., image_id=..., job_name=..., is_prediction: bool = ..., annotation_overwrite=..., num_retry_uploads=...): # -> tuple[dict[str, str] | Any, float, int]:
        ...
    
    def single_upload(self, image_path=..., annotation_path=..., annotation_labelmap=..., hosted_image=..., image_id=..., split=..., num_retry_uploads=..., batch_name=..., tag_names: Optional[List[str]] = ..., is_prediction: bool = ..., annotation_overwrite=..., sequence_number=..., sequence_size=..., **kwargs): # -> dict[str, Any]:
        ...
    
    def search(self, like_image: Optional[str] = ..., prompt: Optional[str] = ..., offset: int = ..., limit: int = ..., tag: Optional[str] = ..., class_name: Optional[str] = ..., in_dataset: Optional[str] = ..., batch: bool = ..., batch_id: Optional[str] = ..., fields: Optional[List[str]] = ..., *, annotation_job: Optional[bool] = ..., annotation_job_id: Optional[str] = ...): # -> Any:
        """
        Search for images in a project.

        Args:
            like_image (str): name of an image in your dataset to use if you want to find images similar to that one
            prompt (str): search prompt
            offset (int): offset of results
            limit (int): limit of results
            tag (str): tag that an image must have
            class_name (str): class name that an image must have
            in_dataset (str): dataset that an image must be in
            batch (bool): whether the image must be in a batch
            batch_id (str): batch id that an image must be in
            annotation_job (bool): whether the image must be in an annotation job
            annotation_job_id (str): annotation job id that an image must be in
            fields (list): fields to return in results (default: ["id", "created", "name", "labels"])

        Returns:
            A list of images that match the search criteria.

        Example:
            >>> import roboflow

            >>> rf = roboflow.Roboflow(api_key="")

            >>> project = rf.workspace().project("PROJECT_ID")

            >>> results = project.search(query="cat", limit=10)
        """
        ...
    
    def search_all(self, like_image: Optional[str] = ..., prompt: Optional[str] = ..., offset: int = ..., limit: int = ..., tag: Optional[str] = ..., class_name: Optional[str] = ..., in_dataset: Optional[str] = ..., batch: bool = ..., batch_id: Optional[str] = ..., fields: Optional[List[str]] = ..., *, annotation_job: Optional[bool] = ..., annotation_job_id: Optional[str] = ...): # -> Generator[Any, Any, None]:
        """
        Create a paginated list of search results for use in searching the images in a project.

        Args:
            like_image (str): name of an image in your dataset to use if you want to find images similar to that one
            prompt (str): search prompt
            offset (int): offset of results
            limit (int): limit of results
            tag (str): tag that an image must have
            class_name (str): class name that an image must have
            in_dataset (str): dataset that an image must be in
            batch (bool): whether the image must be in a batch
            batch_id (str): batch id that an image must be in
            annotation_job (bool): whether the image must be in an annotation job
            annotation_job_id (str): annotation job id that an image must be in
            fields (list): fields to return in results (default: ["id", "created", "name", "labels"])

        Returns:
            A list of images that match the search criteria.

        Example:
            >>> import roboflow

            >>> rf = roboflow.Roboflow(api_key="")

            >>> project = rf.workspace().project("PROJECT_ID")

            >>> results = project.search_all(query="cat", limit=10)

            >>> for result in results:

            >>>     print(result)
        """
        ...
    
    def __str__(self) -> str:
        """
        Show a string representation of a Project object.
        """
        ...
    
    def image(self, image_id: str) -> Dict:
        """
        Fetch the details of a specific image from the Roboflow API.

        Args:
            image_id (str): The ID of the image to fetch.

        Returns:
            Dict: A dictionary containing the image details.

        Example:
            >>> import roboflow

            >>> rf = roboflow.Roboflow(api_key="YOUR_API_KEY")

            >>> project = rf.workspace().project("PROJECT_ID")

            >>> image_details = project.image("image-id")
        """
        ...
    
    def create_annotation_job(self, name: str, batch_id: str, num_images: int, labeler_email: str, reviewer_email: str) -> Dict:
        """
        Create a new annotation job in the project.

        Args:
            name (str): The name of the annotation job
            batch_id (str): The ID of the batch that contains the images to annotate
            num_images (int): The number of images to include in the job
            labeler_email (str): The email of the user who will label the images
            reviewer_email (str): The email of the user who will review the annotations

        Returns:
            Dict: A dictionary containing the created job details

        Example:
            >>> import roboflow

            >>> rf = roboflow.Roboflow(api_key="YOUR_API_KEY")

            >>> project = rf.workspace().project("PROJECT_ID")

            >>> job = project.create_annotation_job(
            ...     name="Job created by API",
            ...     batch_id="batch123",
            ...     num_images=10,
            ...     labeler_email="user@example.com",
            ...     reviewer_email="reviewer@example.com"
            ... )
        """
        ...
    
    def get_batches(self) -> Dict:
        """
        Get a list of all batches in the project.

        Returns:
            Dict: A dictionary containing the list of batches

        Example:
            >>> import roboflow

            >>> rf = roboflow.Roboflow(api_key="YOUR_API_KEY")

            >>> project = rf.workspace().project("PROJECT_ID")

            >>> batches = project.get_batches()
        """
        ...
    
    def get_batch(self, batch_id: str) -> Dict:
        """
        Get information for a specific batch in the project.

        Args:
            batch_id (str): The ID of the batch to retrieve

        Returns:
            Dict: A dictionary containing the batch details

        Example:
            >>> import roboflow

            >>> rf = roboflow.Roboflow(api_key="YOUR_API_KEY")

            >>> project = rf.workspace().project("PROJECT_ID")

            >>> batch = project.get_batch("batch123")
        """
        ...
    


