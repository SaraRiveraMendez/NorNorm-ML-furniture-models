"""
This type stub file was generated by pyright.
"""

from typing import Optional, TYPE_CHECKING
from roboflow.models.inference import InferenceModel

if TYPE_CHECKING:
    ...
class Version:
    """
    Class representing a Roboflow dataset version.
    """
    model: Optional[InferenceModel]
    def __init__(self, version_dict, type, api_key, name, version, model_format, local: Optional[str], workspace, project, public, colors=...) -> None:
        """
        Initialize a Version object.
        """
        ...
    
    def download(self, model_format=..., location=..., overwrite: bool = ...): # -> Dataset:
        """
        Download and extract a ZIP of a version's dataset in a given format

        :param model_format: A format to use for downloading
        :param location: An optional path for saving the file
        :param overwrite: An optional flag to prevent dataset overwrite when dataset is already downloaded

        Args:
            model_format (str): A format to use for downloading
            location (str): An optional path for saving the file
            overwrite (bool): An optional flag to overwrite an existing dataset if the dataset has already downloaded

        Returns:
            Dataset Object

        Raises:
            RuntimeError: If the Roboflow API returns an error with a helpful JSON body
            HTTPError: If the Network/Roboflow API fails and does not return JSON
        """
        ...
    
    def export(self, model_format=...): # -> Literal[True] | None:
        """
        Ask the Roboflow API to generate a version's dataset in a given format so that it can be downloaded via the `download()` method.

        The export will be asynchronously generated and available for download after some amount of seconds - depending on dataset size.

        Args:
            model_format (str): A format to use for downloading

        Returns:
            True

        Raises:
            RuntimeError: If the Roboflow API returns an error with a helpful JSON body
            HTTPError: If the Network/Roboflow API fails and does not return JSON
        """
        ...
    
    def train(self, speed=..., model_type=..., checkpoint=..., plot_in_notebook=...) -> InferenceModel:
        """
        Ask the Roboflow API to train a previously exported version's dataset.

        Args:
            speed: Whether to train quickly or accurately. Note: accurate training is a paid feature. Default speed is `fast`.
            model_type: The type of model to train. Default depends on kind of project. It takes precedence over speed. You can check the list of model ids by sending an invalid parameter in this argument.
            checkpoint: A string representing the checkpoint to use while training
            plot: Whether to plot the training results. Default is `False`.

        Returns:
            An instance of the trained model class

        Raises:
            RuntimeError: If the Roboflow API returns an error with a helpful JSON body
            HTTPError: If the Network/Roboflow API fails and does not return JSON
        """
        ...
    
    def deploy(self, model_type: str, model_path: str, filename: str = ...) -> None:
        """Uploads provided weights file to Roboflow.

        Args:
            model_type (str): The type of the model to be deployed.
            model_path (str): File path to the model weights to be uploaded.
            filename (str, optional): The name of the weights file. Defaults to "weights/best.pt".
        """
        ...
    
    def __str__(self) -> str:
        """
        String representation of version object.
        """
        ...
    


def unwrap_version_id(version_id: str) -> str:
    ...

