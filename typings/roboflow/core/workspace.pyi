"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, List, Optional

class Workspace:
    """
    Manage a Roboflow workspace.
    """
    def __init__(self, info, api_key, default_workspace, model_format) -> None:
        ...
    
    def list_projects(self): # -> None:
        """
        Print all projects in the workspace to the console.
        """
        ...
    
    def projects(self): # -> list[Any]:
        """
        Retrieve all projects in the workspace.

        Returns:
            List of Project objects.
        """
        ...
    
    def project(self, project_id): # -> Project:
        """
        Retrieve a Project() object that represents a project in the workspace.

        This object can be used to retrieve the model through which to run inference.

        Args:
            project_id (str): id of the project

        Returns:
            Project Object
        """
        ...
    
    def create_project(self, project_name, project_type, project_license, annotation): # -> Project:
        """
        Create a project in a Roboflow workspace.

        Args:
            project_name (str): name of the project
            project_type (str): type of the project
            project_license (str): license of the project (set to `private` for private projects, only available for paid customers)
            annotation (str): annotation of the project

        Returns:
            Project Object
        """
        ...
    
    def clip_compare(self, dir: str = ..., image_ext: str = ..., target_image: str = ...) -> List[dict]:
        """
        Compare all images in a directory to a target image using CLIP

        Args:
            dir (str): name reference to a directory of images for comparison
            image_ext (str): file format for expected images (don't include the . before the file type name)
            target_image (str): name reference for target image to compare individual images from directory against

        Returns:
            # TODO: fix docs
            dict: a key:value mapping of image_name:comparison_score_to_target
        """
        ...
    
    def two_stage(self, image: str = ..., first_stage_model_name: str = ..., first_stage_model_version: int = ..., second_stage_model_name: str = ..., second_stage_model_version: int = ...) -> List[dict]:
        """
        For each prediction in a first stage detection, perform detection with the second stage model

        Args:
            image (str): name of the image to be processed
            first_stage_model_name (str): name of the first stage detection model
            first_stage_model_version (int): version number for the first stage model
            second_stage_mode (str): name of the second stage detection model
            second_stage_model_version (int): version number for the second stage model

        Returns:
            # TODO: fix docs
            dict: a json obj containing the results of the second stage detection
        """
        ...
    
    def two_stage_ocr(self, image: str = ..., first_stage_model_name: str = ..., first_stage_model_version: int = ...) -> List[dict]:
        """
        For each prediction in the first stage object detection, perform OCR as second stage.

        Args:
            image (str): name of the image to be processed
            first_stage_model_name (str): name of the first stage detection model
            first_stage_model_version (int): version number for the first stage model

        Returns:
            # TODO: fix docs
            dict: a json obj containing the results of the second stage detection
        """
        ...
    
    def upload_dataset(self, dataset_path: str, project_name: str, num_workers: int = ..., dataset_format: str = ..., project_license: str = ..., project_type: str = ..., batch_name=..., num_retries=...): # -> None:
        """
        Upload a dataset to Roboflow.

        Args:
            dataset_path (str): path to the dataset
            project_name (str): name of the project
            num_workers (int): number of workers to use for parallel uploads
            dataset_format (str): format of the dataset (`voc`, `yolov8`, `yolov5`)
            project_license (str): license of the project (set to `private` for private projects, only available for paid customers)
            project_type (str): type of the project (only `object-detection` is supported)
        """
        ...
    
    def active_learning(self, raw_data_location: str = ..., raw_data_extension: str = ..., inference_endpoint: Optional[List[str]] = ..., upload_destination: str = ..., conditionals: Optional[Dict] = ..., use_localhost: bool = ..., local_server=...) -> Any:
        """perform inference on each image in directory and upload based on conditions
        @params:
            raw_data_location: (str) = folder of frames to be processed
            raw_data_extension: (str) = extension of frames to be processed
            inference_endpoint: (List[str, int]) = name of the project
            upload_destination: (str) = name of the upload project
            conditionals: (dict) = dictionary of upload conditions
            use_localhost: (bool) = determines if local http format used or remote endpoint
            local_server: (str) = local http address for inference server, use_localhost must be True for this to be used
        """
        ...
    
    def deploy_model(self, model_type: str, model_path: str, project_ids: list[str], model_name: str, filename: str = ...): # -> None:
        """Uploads provided weights file to Roboflow.
        Args:
            model_type (str): The type of the model to be deployed.
            model_path (str): File path to the model weights to be uploaded.
            project_ids (list[str]): List of project IDs to deploy the model to.
            filename (str, optional): The name of the weights file. Defaults to "weights/best.pt".
        """
        ...
    
    def __str__(self) -> str:
        ...
    


