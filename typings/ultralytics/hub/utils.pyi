"""
This type stub file was generated by pyright.
"""

import requests
from typing import Any, Optional

HUB_API_ROOT = ...
HUB_WEB_ROOT = ...
PREFIX = ...
HELP_MSG = ...
def request_with_credentials(url: str) -> Any:
    """
    Make an AJAX request with cookies attached in a Google Colab environment.

    Args:
        url (str): The URL to make the request to.

    Returns:
        (Any): The response data from the AJAX request.

    Raises:
        OSError: If the function is not run in a Google Colab environment.
    """
    ...

def requests_with_progress(method: str, url: str, **kwargs) -> requests.Response:
    """
    Make an HTTP request using the specified method and URL, with an optional progress bar.

    Args:
        method (str): The HTTP method to use (e.g. 'GET', 'POST').
        url (str): The URL to send the request to.
        **kwargs (Any): Additional keyword arguments to pass to the underlying `requests.request` function.

    Returns:
        (requests.Response): The response object from the HTTP request.

    Notes:
        - If 'progress' is set to True, the progress bar will display the download progress for responses with a known
          content length.
        - If 'progress' is a number then progress bar will display assuming content length = progress.
    """
    ...

def smart_request(method: str, url: str, retry: int = ..., timeout: int = ..., thread: bool = ..., code: int = ..., verbose: bool = ..., progress: bool = ..., **kwargs) -> Optional[requests.Response]:
    """
    Make an HTTP request using the 'requests' library, with exponential backoff retries up to a specified timeout.

    Args:
        method (str): The HTTP method to use for the request. Choices are 'post' and 'get'.
        url (str): The URL to make the request to.
        retry (int, optional): Number of retries to attempt before giving up.
        timeout (int, optional): Timeout in seconds after which the function will give up retrying.
        thread (bool, optional): Whether to execute the request in a separate daemon thread.
        code (int, optional): An identifier for the request, used for logging purposes.
        verbose (bool, optional): A flag to determine whether to print out to console or not.
        progress (bool, optional): Whether to show a progress bar during the request.
        **kwargs (Any): Keyword arguments to be passed to the requests function specified in method.

    Returns:
        (requests.Response | None): The HTTP response object. If the request is executed in a separate thread, returns
            None.
    """
    ...

class Events:
    """
    A class for collecting anonymous event analytics.

    Event analytics are enabled when sync=True in settings and disabled when sync=False. Run 'yolo settings' to see and
    update settings.

    Attributes:
        url (str): The URL to send anonymous events.
        events (list): List of collected events to be sent.
        rate_limit (float): The rate limit in seconds for sending events.
        t (float): Rate limit timer in seconds.
        metadata (dict): A dictionary containing metadata about the environment.
        enabled (bool): A flag to enable or disable Events based on certain conditions.
    """
    url = ...
    def __init__(self) -> None:
        """Initialize the Events object with default values for events, rate_limit, and metadata."""
        ...
    
    def __call__(self, cfg, device=...): # -> None:
        """
        Attempt to add a new event to the events list and send events if the rate limit is reached.

        Args:
            cfg (IterableSimpleNamespace): The configuration object containing mode and task information.
            device (torch.device | str, optional): The device type (e.g., 'cpu', 'cuda').
        """
        ...
    


events = ...
