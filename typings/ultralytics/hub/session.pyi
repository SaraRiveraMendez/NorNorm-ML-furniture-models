"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, Optional

AGENT_NAME = ...
class HUBTrainingSession:
    """
    HUB training session for Ultralytics HUB YOLO models.

    This class encapsulates the functionality for interacting with Ultralytics HUB during model training, including
    model creation, metrics tracking, and checkpoint uploading.

    Attributes:
        model_id (str): Identifier for the YOLO model being trained.
        model_url (str): URL for the model in Ultralytics HUB.
        rate_limits (Dict[str, int]): Rate limits for different API calls in seconds.
        timers (Dict[str, Any]): Timers for rate limiting.
        metrics_queue (Dict[str, Any]): Queue for the model's metrics.
        metrics_upload_failed_queue (Dict[str, Any]): Queue for metrics that failed to upload.
        model (Any): Model data fetched from Ultralytics HUB.
        model_file (str): Path to the model file.
        train_args (Dict[str, Any]): Arguments for training the model.
        client (Any): Client for interacting with Ultralytics HUB.
        filename (str): Filename of the model.

    Examples:
        Create a training session with a model URL
        >>> session = HUBTrainingSession("https://hub.ultralytics.com/models/example-model")
        >>> session.upload_metrics()
    """
    def __init__(self, identifier: str) -> None:
        """
        Initialize the HUBTrainingSession with the provided model identifier.

        Args:
            identifier (str): Model identifier used to initialize the HUB training session. It can be a URL string
                or a model key with specific format.

        Raises:
            ValueError: If the provided model identifier is invalid.
            ConnectionError: If connecting with global API key is not supported.
            ModuleNotFoundError: If hub-sdk package is not installed.
        """
        ...
    
    @classmethod
    def create_session(cls, identifier: str, args: Optional[Dict[str, Any]] = ...): # -> Self | None:
        """
        Create an authenticated HUBTrainingSession or return None.

        Args:
            identifier (str): Model identifier used to initialize the HUB training session.
            args (Dict[str, Any], optional): Arguments for creating a new model if identifier is not a HUB model URL.

        Returns:
            session (HUBTrainingSession | None): An authenticated session or None if creation fails.
        """
        ...
    
    def load_model(self, model_id: str): # -> None:
        """
        Load an existing model from Ultralytics HUB using the provided model identifier.

        Args:
            model_id (str): The identifier of the model to load.

        Raises:
            ValueError: If the specified HUB model does not exist.
        """
        ...
    
    def create_model(self, model_args: Dict[str, Any]): # -> None:
        """
        Initialize a HUB training session with the specified model arguments.

        Args:
            model_args (Dict[str, Any]): Arguments for creating the model, including batch size, epochs, image size,
                etc.

        Returns:
            (None): If the model could not be created.
        """
        ...
    
    def request_queue(self, request_func, retry: int = ..., timeout: int = ..., thread: bool = ..., verbose: bool = ..., progress_total: Optional[int] = ..., stream_response: Optional[bool] = ..., *args, **kwargs): # -> None:
        """
        Execute request_func with retries, timeout handling, optional threading, and progress tracking.

        Args:
            request_func (callable): The function to execute.
            retry (int): Number of retry attempts.
            timeout (int): Maximum time to wait for the request to complete.
            thread (bool): Whether to run the request in a separate thread.
            verbose (bool): Whether to log detailed messages.
            progress_total (int, optional): Total size for progress tracking.
            stream_response (bool, optional): Whether to stream the response.
            *args (Any): Additional positional arguments for request_func.
            **kwargs (Any): Additional keyword arguments for request_func.

        Returns:
            (requests.Response | None): The response object if thread=False, otherwise None.
        """
        ...
    
    def upload_metrics(self): # -> None:
        """Upload model metrics to Ultralytics HUB."""
        ...
    
    def upload_model(self, epoch: int, weights: str, is_best: bool = ..., map: float = ..., final: bool = ...) -> None:
        """
        Upload a model checkpoint to Ultralytics HUB.

        Args:
            epoch (int): The current training epoch.
            weights (str): Path to the model weights file.
            is_best (bool): Indicates if the current model is the best one so far.
            map (float): Mean average precision of the model.
            final (bool): Indicates if the model is the final model after training.
        """
        ...
    


