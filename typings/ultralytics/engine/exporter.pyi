"""
This type stub file was generated by pyright.
"""

import torch

"""
Export a YOLO PyTorch model to other formats. TensorFlow exports authored by https://github.com/zldrobit.

Format                  | `format=argument`         | Model
---                     | ---                       | ---
PyTorch                 | -                         | yolo11n.pt
TorchScript             | `torchscript`             | yolo11n.torchscript
ONNX                    | `onnx`                    | yolo11n.onnx
OpenVINO                | `openvino`                | yolo11n_openvino_model/
TensorRT                | `engine`                  | yolo11n.engine
CoreML                  | `coreml`                  | yolo11n.mlpackage
TensorFlow SavedModel   | `saved_model`             | yolo11n_saved_model/
TensorFlow GraphDef     | `pb`                      | yolo11n.pb
TensorFlow Lite         | `tflite`                  | yolo11n.tflite
TensorFlow Edge TPU     | `edgetpu`                 | yolo11n_edgetpu.tflite
TensorFlow.js           | `tfjs`                    | yolo11n_web_model/
PaddlePaddle            | `paddle`                  | yolo11n_paddle_model/
MNN                     | `mnn`                     | yolo11n.mnn
NCNN                    | `ncnn`                    | yolo11n_ncnn_model/
IMX                     | `imx`                     | yolo11n_imx_model/
RKNN                    | `rknn`                    | yolo11n_rknn_model/

Requirements:
    $ pip install "ultralytics[export]"

Python:
    from ultralytics import YOLO
    model = YOLO('yolo11n.pt')
    results = model.export(format='onnx')

CLI:
    $ yolo mode=export model=yolo11n.pt format=onnx

Inference:
    $ yolo predict model=yolo11n.pt                 # PyTorch
                         yolo11n.torchscript        # TorchScript
                         yolo11n.onnx               # ONNX Runtime or OpenCV DNN with dnn=True
                         yolo11n_openvino_model     # OpenVINO
                         yolo11n.engine             # TensorRT
                         yolo11n.mlpackage          # CoreML (macOS-only)
                         yolo11n_saved_model        # TensorFlow SavedModel
                         yolo11n.pb                 # TensorFlow GraphDef
                         yolo11n.tflite             # TensorFlow Lite
                         yolo11n_edgetpu.tflite     # TensorFlow Edge TPU
                         yolo11n_paddle_model       # PaddlePaddle
                         yolo11n.mnn                # MNN
                         yolo11n_ncnn_model         # NCNN
                         yolo11n_imx_model          # IMX

TensorFlow.js:
    $ cd .. && git clone https://github.com/zldrobit/tfjs-yolov5-example.git && cd tfjs-yolov5-example
    $ npm install
    $ ln -s ../../yolo11n_web_model public/yolo11n_web_model
    $ npm start
"""
def export_formats(): # -> dict[str, tuple[Any, ...]]:
    """Return a dictionary of Ultralytics YOLO export formats."""
    ...

def validate_args(format, passed_args, valid_args): # -> None:
    """
    Validate arguments based on the export format.

    Args:
        format (str): The export format.
        passed_args (Namespace): The arguments used during export.
        valid_args (list): List of valid arguments for the format.

    Raises:
        AssertionError: If an unsupported argument is used, or if the format lacks supported argument listings.
    """
    ...

def gd_outputs(gd): # -> list[str]:
    """Return TensorFlow GraphDef model output node names."""
    ...

def try_export(inner_func): # -> Callable[..., tuple[Any, Any]]:
    """YOLO export decorator, i.e. @try_export."""
    ...

class Exporter:
    """
    A class for exporting YOLO models to various formats.

    This class provides functionality to export YOLO models to different formats including ONNX, TensorRT, CoreML,
    TensorFlow, and others. It handles format validation, device selection, model preparation, and the actual export
    process for each supported format.

    Attributes:
        args (SimpleNamespace): Configuration arguments for the exporter.
        callbacks (dict): Dictionary of callback functions for different export events.
        im (torch.Tensor): Input tensor for model inference during export.
        model (torch.nn.Module): The YOLO model to be exported.
        file (Path): Path to the model file being exported.
        output_shape (tuple): Shape of the model output tensor(s).
        pretty_name (str): Formatted model name for display purposes.
        metadata (dict): Model metadata including description, author, version, etc.
        device (torch.device): Device on which the model is loaded.
        imgsz (tuple): Input image size for the model.

    Methods:
        __call__: Main export method that handles the export process.
        get_int8_calibration_dataloader: Build dataloader for INT8 calibration.
        export_torchscript: Export model to TorchScript format.
        export_onnx: Export model to ONNX format.
        export_openvino: Export model to OpenVINO format.
        export_paddle: Export model to PaddlePaddle format.
        export_mnn: Export model to MNN format.
        export_ncnn: Export model to NCNN format.
        export_coreml: Export model to CoreML format.
        export_engine: Export model to TensorRT format.
        export_saved_model: Export model to TensorFlow SavedModel format.
        export_pb: Export model to TensorFlow GraphDef format.
        export_tflite: Export model to TensorFlow Lite format.
        export_edgetpu: Export model to Edge TPU format.
        export_tfjs: Export model to TensorFlow.js format.
        export_rknn: Export model to RKNN format.
        export_imx: Export model to IMX format.

    Examples:
        Export a YOLOv8 model to ONNX format
        >>> from ultralytics.engine.exporter import Exporter
        >>> exporter = Exporter()
        >>> exporter(model="yolov8n.pt")  # exports to yolov8n.onnx

        Export with specific arguments
        >>> args = {"format": "onnx", "dynamic": True, "half": True}
        >>> exporter = Exporter(overrides=args)
        >>> exporter(model="yolov8n.pt")
    """
    def __init__(self, cfg=..., overrides=..., _callbacks=...) -> None:
        """
        Initialize the Exporter class.

        Args:
            cfg (str, optional): Path to a configuration file.
            overrides (dict, optional): Configuration overrides.
            _callbacks (dict, optional): Dictionary of callback functions.
        """
        ...
    
    def __call__(self, model=...) -> str:
        """Return list of exported files/dirs after running callbacks."""
        ...
    
    def get_int8_calibration_dataloader(self, prefix=...): # -> InfiniteDataLoader:
        """Build and return a dataloader for calibration of INT8 models."""
        ...
    
    @try_export
    def export_torchscript(self, prefix=...): # -> tuple[Path, None]:
        """Export YOLO model to TorchScript format."""
        ...
    
    @try_export
    def export_onnx(self, prefix=...): # -> tuple[str, Any]:
        """Export YOLO model to ONNX format."""
        ...
    
    @try_export
    def export_openvino(self, prefix=...): # -> tuple[str, None]:
        """Export YOLO model to OpenVINO format."""
        ...
    
    @try_export
    def export_paddle(self, prefix=...): # -> tuple[str, None]:
        """Export YOLO model to PaddlePaddle format."""
        ...
    
    @try_export
    def export_mnn(self, prefix=...): # -> tuple[str, None]:
        """Export YOLO model to MNN format using MNN https://github.com/alibaba/MNN."""
        ...
    
    @try_export
    def export_ncnn(self, prefix=...): # -> tuple[str, None]:
        """Export YOLO model to NCNN format using PNNX https://github.com/pnnx/pnnx."""
        ...
    
    @try_export
    def export_coreml(self, prefix=...): # -> tuple[Path, Any]:
        """Export YOLO model to CoreML format."""
        ...
    
    @try_export
    def export_engine(self, dla=..., prefix=...): # -> tuple[Path, None]:
        """Export YOLO model to TensorRT format https://developer.nvidia.com/tensorrt."""
        ...
    
    @try_export
    def export_saved_model(self, prefix=...): # -> tuple[str, Any]:
        """Export YOLO model to TensorFlow SavedModel format."""
        ...
    
    @try_export
    def export_pb(self, keras_model, prefix=...): # -> tuple[Path, None]:
        """Export YOLO model to TensorFlow GraphDef *.pb format https://github.com/leimao/Frozen-Graph-TensorFlow."""
        ...
    
    @try_export
    def export_tflite(self, prefix=...): # -> tuple[str, None]:
        """Export YOLO model to TensorFlow Lite format."""
        ...
    
    @try_export
    def export_edgetpu(self, tflite_model=..., prefix=...): # -> tuple[str, None]:
        """Export YOLO model to Edge TPU format https://coral.ai/docs/edgetpu/models-intro/."""
        ...
    
    @try_export
    def export_tfjs(self, prefix=...): # -> tuple[str, None]:
        """Export YOLO model to TensorFlow.js format."""
        ...
    
    @try_export
    def export_rknn(self, prefix=...): # -> tuple[Path, None]:
        """Export YOLO model to RKNN format."""
        ...
    
    @try_export
    def export_imx(self, prefix=...): # -> tuple[Path, None]:
        """Export YOLO model to IMX format."""
        class NMSWrapper(torch.nn.Module):
            """Wrap PyTorch Module with multiclass_nms layer from sony_custom_layers."""
            ...
        
        
    
    def add_callback(self, event: str, callback): # -> None:
        """Append the given callback to the specified event."""
        ...
    
    def run_callbacks(self, event: str): # -> None:
        """Execute all callbacks for a given event."""
        ...
    


class IOSDetectModel(torch.nn.Module):
    """Wrap an Ultralytics YOLO model for Apple iOS CoreML export."""
    def __init__(self, model, im) -> None:
        """
        Initialize the IOSDetectModel class with a YOLO model and example image.

        Args:
            model (torch.nn.Module): The YOLO model to wrap.
            im (torch.Tensor): Example input tensor with shape (B, C, H, W).
        """
        ...
    
    def forward(self, x): # -> tuple[Any, Any]:
        """Normalize predictions of object detection model with input size-dependent factors."""
        ...
    


class NMSModel(torch.nn.Module):
    """Model wrapper with embedded NMS for Detect, Segment, Pose and OBB."""
    def __init__(self, model, args) -> None:
        """
        Initialize the NMSModel.

        Args:
            model (torch.nn.Module): The model to wrap with NMS postprocessing.
            args (Namespace): The export arguments.
        """
        ...
    
    def forward(self, x): # -> tuple[Tensor, Any] | Tensor:
        """
        Perform inference with NMS post-processing. Supports Detect, Segment, OBB and Pose.

        Args:
            x (torch.Tensor): The preprocessed tensor with shape (N, 3, H, W).

        Returns:
            (torch.Tensor): List of detections, each an (N, max_det, 4 + 2 + extra_shape) Tensor where N is the
                number of detections after NMS.
        """
        ...
    


