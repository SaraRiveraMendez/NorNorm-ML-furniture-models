"""
This type stub file was generated by pyright.
"""

import torch
from ultralytics.utils.torch_utils import smart_inference_mode

"""
Check a model's accuracy on a test or val split of a dataset.

Usage:
    $ yolo mode=val model=yolo11n.pt data=coco8.yaml imgsz=640

Usage - formats:
    $ yolo mode=val model=yolo11n.pt                 # PyTorch
                          yolo11n.torchscript        # TorchScript
                          yolo11n.onnx               # ONNX Runtime or OpenCV DNN with dnn=True
                          yolo11n_openvino_model     # OpenVINO
                          yolo11n.engine             # TensorRT
                          yolo11n.mlpackage          # CoreML (macOS-only)
                          yolo11n_saved_model        # TensorFlow SavedModel
                          yolo11n.pb                 # TensorFlow GraphDef
                          yolo11n.tflite             # TensorFlow Lite
                          yolo11n_edgetpu.tflite     # TensorFlow Edge TPU
                          yolo11n_paddle_model       # PaddlePaddle
                          yolo11n.mnn                # MNN
                          yolo11n_ncnn_model         # NCNN
                          yolo11n_imx_model          # Sony IMX
                          yolo11n_rknn_model         # Rockchip RKNN
"""
class BaseValidator:
    """
    A base class for creating validators.

    This class provides the foundation for validation processes, including model evaluation, metric computation, and
    result visualization.

    Attributes:
        args (SimpleNamespace): Configuration for the validator.
        dataloader (DataLoader): Dataloader to use for validation.
        model (nn.Module): Model to validate.
        data (dict): Data dictionary containing dataset information.
        device (torch.device): Device to use for validation.
        batch_i (int): Current batch index.
        training (bool): Whether the model is in training mode.
        names (dict): Class names mapping.
        seen (int): Number of images seen so far during validation.
        stats (dict): Statistics collected during validation.
        confusion_matrix: Confusion matrix for classification evaluation.
        nc (int): Number of classes.
        iouv (torch.Tensor): IoU thresholds from 0.50 to 0.95 in spaces of 0.05.
        jdict (list): List to store JSON validation results.
        speed (dict): Dictionary with keys 'preprocess', 'inference', 'loss', 'postprocess' and their respective
            batch processing times in milliseconds.
        save_dir (Path): Directory to save results.
        plots (dict): Dictionary to store plots for visualization.
        callbacks (dict): Dictionary to store various callback functions.
        stride (int): Model stride for padding calculations.
        loss (torch.Tensor): Accumulated loss during training validation.

    Methods:
        __call__: Execute validation process, running inference on dataloader and computing performance metrics.
        match_predictions: Match predictions to ground truth objects using IoU.
        add_callback: Append the given callback to the specified event.
        run_callbacks: Run all callbacks associated with a specified event.
        get_dataloader: Get data loader from dataset path and batch size.
        build_dataset: Build dataset from image path.
        preprocess: Preprocess an input batch.
        postprocess: Postprocess the predictions.
        init_metrics: Initialize performance metrics for the YOLO model.
        update_metrics: Update metrics based on predictions and batch.
        finalize_metrics: Finalize and return all metrics.
        get_stats: Return statistics about the model's performance.
        print_results: Print the results of the model's predictions.
        get_desc: Get description of the YOLO model.
        on_plot: Register plots for visualization.
        plot_val_samples: Plot validation samples during training.
        plot_predictions: Plot YOLO model predictions on batch images.
        pred_to_json: Convert predictions to JSON format.
        eval_json: Evaluate and return JSON format of prediction statistics.
    """
    def __init__(self, dataloader=..., save_dir=..., args=..., _callbacks=...) -> None:
        """
        Initialize a BaseValidator instance.

        Args:
            dataloader (torch.utils.data.DataLoader, optional): Dataloader to be used for validation.
            save_dir (Path, optional): Directory to save results.
            args (SimpleNamespace, optional): Configuration for the validator.
            _callbacks (dict, optional): Dictionary to store various callback functions.
        """
        ...
    
    @smart_inference_mode()
    def __call__(self, trainer=..., model=...):
        """
        Execute validation process, running inference on dataloader and computing performance metrics.

        Args:
            trainer (object, optional): Trainer object that contains the model to validate.
            model (nn.Module, optional): Model to validate if not using a trainer.

        Returns:
            (dict): Dictionary containing validation statistics.
        """
        ...
    
    def match_predictions(self, pred_classes: torch.Tensor, true_classes: torch.Tensor, iou: torch.Tensor, use_scipy: bool = ...) -> torch.Tensor:
        """
        Match predictions to ground truth objects using IoU.

        Args:
            pred_classes (torch.Tensor): Predicted class indices of shape (N,).
            true_classes (torch.Tensor): Target class indices of shape (M,).
            iou (torch.Tensor): An NxM tensor containing the pairwise IoU values for predictions and ground truth.
            use_scipy (bool, optional): Whether to use scipy for matching (more precise).

        Returns:
            (torch.Tensor): Correct tensor of shape (N, 10) for 10 IoU thresholds.
        """
        ...
    
    def add_callback(self, event: str, callback): # -> None:
        """Append the given callback to the specified event."""
        ...
    
    def run_callbacks(self, event: str): # -> None:
        """Run all callbacks associated with a specified event."""
        ...
    
    def get_dataloader(self, dataset_path, batch_size):
        """Get data loader from dataset path and batch size."""
        ...
    
    def build_dataset(self, img_path):
        """Build dataset from image path."""
        ...
    
    def preprocess(self, batch):
        """Preprocess an input batch."""
        ...
    
    def postprocess(self, preds):
        """Postprocess the predictions."""
        ...
    
    def init_metrics(self, model): # -> None:
        """Initialize performance metrics for the YOLO model."""
        ...
    
    def update_metrics(self, preds, batch): # -> None:
        """Update metrics based on predictions and batch."""
        ...
    
    def finalize_metrics(self): # -> None:
        """Finalize and return all metrics."""
        ...
    
    def get_stats(self): # -> dict[Any, Any]:
        """Return statistics about the model's performance."""
        ...
    
    def print_results(self): # -> None:
        """Print the results of the model's predictions."""
        ...
    
    def get_desc(self): # -> None:
        """Get description of the YOLO model."""
        ...
    
    @property
    def metric_keys(self): # -> list[Any]:
        """Return the metric keys used in YOLO training/validation."""
        ...
    
    def on_plot(self, name, data=...): # -> None:
        """Register plots for visualization."""
        ...
    
    def plot_val_samples(self, batch, ni): # -> None:
        """Plot validation samples during training."""
        ...
    
    def plot_predictions(self, batch, preds, ni): # -> None:
        """Plot YOLO model predictions on batch images."""
        ...
    
    def pred_to_json(self, preds, batch): # -> None:
        """Convert predictions to JSON format."""
        ...
    
    def eval_json(self, stats): # -> None:
        """Evaluate and return JSON format of prediction statistics."""
        ...
    


