"""
This type stub file was generated by pyright.
"""

import torch
from typing import Any, Dict, Optional
from ultralytics.engine.trainer import BaseTrainer

class ClassificationTrainer(BaseTrainer):
    """
    A trainer class extending BaseTrainer for training image classification models.

    This trainer handles the training process for image classification tasks, supporting both YOLO classification models
    and torchvision models with comprehensive dataset handling and validation.

    Attributes:
        model (ClassificationModel): The classification model to be trained.
        data (Dict[str, Any]): Dictionary containing dataset information including class names and number of classes.
        loss_names (List[str]): Names of the loss functions used during training.
        validator (ClassificationValidator): Validator instance for model evaluation.

    Methods:
        set_model_attributes: Set the model's class names from the loaded dataset.
        get_model: Return a modified PyTorch model configured for training.
        setup_model: Load, create or download model for classification.
        build_dataset: Create a ClassificationDataset instance.
        get_dataloader: Return PyTorch DataLoader with transforms for image preprocessing.
        preprocess_batch: Preprocess a batch of images and classes.
        progress_string: Return a formatted string showing training progress.
        get_validator: Return an instance of ClassificationValidator.
        label_loss_items: Return a loss dict with labelled training loss items.
        plot_metrics: Plot metrics from a CSV file.
        final_eval: Evaluate trained model and save validation results.
        plot_training_samples: Plot training samples with their annotations.

    Examples:
        Initialize and train a classification model
        >>> from ultralytics.models.yolo.classify import ClassificationTrainer
        >>> args = dict(model="yolo11n-cls.pt", data="imagenet10", epochs=3)
        >>> trainer = ClassificationTrainer(overrides=args)
        >>> trainer.train()
    """
    def __init__(self, cfg=..., overrides: Optional[Dict[str, Any]] = ..., _callbacks=...) -> None:
        """
        Initialize a ClassificationTrainer object.

        This constructor sets up a trainer for image classification tasks, configuring the task type and default
        image size if not specified.

        Args:
            cfg (Dict[str, Any], optional): Default configuration dictionary containing training parameters.
            overrides (Dict[str, Any], optional): Dictionary of parameter overrides for the default configuration.
            _callbacks (List[Any], optional): List of callback functions to be executed during training.

        Examples:
            Create a trainer with custom configuration
            >>> from ultralytics.models.yolo.classify import ClassificationTrainer
            >>> args = dict(model="yolo11n-cls.pt", data="imagenet10", epochs=3)
            >>> trainer = ClassificationTrainer(overrides=args)
            >>> trainer.train()
        """
        ...
    
    def set_model_attributes(self): # -> None:
        """Set the YOLO model's class names from the loaded dataset."""
        ...
    
    def get_model(self, cfg=..., weights=..., verbose: bool = ...): # -> ClassificationModel:
        """
        Return a modified PyTorch model configured for training YOLO classification.

        Args:
            cfg (Any, optional): Model configuration.
            weights (Any, optional): Pre-trained model weights.
            verbose (bool, optional): Whether to display model information.

        Returns:
            (ClassificationModel): Configured PyTorch model for classification.
        """
        ...
    
    def setup_model(self): # -> dict[str, Any] | dict[Any, Any] | None:
        """
        Load, create or download model for classification tasks.

        Returns:
            (Any): Model checkpoint if applicable, otherwise None.
        """
        ...
    
    def build_dataset(self, img_path: str, mode: str = ..., batch=...): # -> ClassificationDataset:
        """
        Create a ClassificationDataset instance given an image path and mode.

        Args:
            img_path (str): Path to the dataset images.
            mode (str, optional): Dataset mode ('train', 'val', or 'test').
            batch (Any, optional): Batch information (unused in this implementation).

        Returns:
            (ClassificationDataset): Dataset for the specified mode.
        """
        ...
    
    def get_dataloader(self, dataset_path: str, batch_size: int = ..., rank: int = ..., mode: str = ...): # -> InfiniteDataLoader:
        """
        Return PyTorch DataLoader with transforms to preprocess images.

        Args:
            dataset_path (str): Path to the dataset.
            batch_size (int, optional): Number of images per batch.
            rank (int, optional): Process rank for distributed training.
            mode (str, optional): 'train', 'val', or 'test' mode.

        Returns:
            (torch.utils.data.DataLoader): DataLoader for the specified dataset and mode.
        """
        ...
    
    def preprocess_batch(self, batch: Dict[str, torch.Tensor]) -> Dict[str, torch.Tensor]:
        """Preprocess a batch of images and classes."""
        ...
    
    def progress_string(self) -> str:
        """Return a formatted string showing training progress."""
        ...
    
    def get_validator(self): # -> ClassificationValidator:
        """Return an instance of ClassificationValidator for validation."""
        ...
    
    def label_loss_items(self, loss_items: Optional[torch.Tensor] = ..., prefix: str = ...): # -> list[str] | dict[bytes, bytes]:
        """
        Return a loss dict with labelled training loss items tensor.

        Args:
            loss_items (torch.Tensor, optional): Loss tensor items.
            prefix (str, optional): Prefix to prepend to loss names.

        Returns:
            keys (List[str]): List of loss keys if loss_items is None.
            loss_dict (Dict[str, float]): Dictionary of loss items if loss_items is provided.
        """
        ...
    
    def plot_metrics(self): # -> None:
        """Plot metrics from a CSV file."""
        ...
    
    def final_eval(self): # -> None:
        """Evaluate trained model and save validation results."""
        ...
    
    def plot_training_samples(self, batch: Dict[str, torch.Tensor], ni: int): # -> None:
        """
        Plot training samples with their annotations.

        Args:
            batch (Dict[str, torch.Tensor]): Batch containing images and class labels.
            ni (int): Number of iterations.
        """
        ...
    


