"""
This type stub file was generated by pyright.
"""

from pathlib import Path
from typing import Dict, List, Optional, Union
from ultralytics.models.yolo.detect import DetectionTrainer
from ..world.train_world import WorldTrainerFromScratch

class YOLOETrainer(DetectionTrainer):
    """
    A trainer class for YOLOE object detection models.

    This class extends DetectionTrainer to provide specialized training functionality for YOLOE models,
    including custom model initialization, validation, and dataset building with multi-modal support.

    Attributes:
        loss_names (tuple): Names of loss components used during training.

    Methods:
        get_model: Initialize and return a YOLOEModel with specified configuration.
        get_validator: Return a YOLOEDetectValidator for model validation.
        build_dataset: Build YOLO dataset with multi-modal support for training.
    """
    def __init__(self, cfg=..., overrides: Optional[Dict] = ..., _callbacks=...) -> None:
        """
        Initialize the YOLOE Trainer with specified configurations.

        This method sets up the YOLOE trainer with the provided configuration and overrides, initializing
        the training environment, model, and callbacks for YOLOE object detection training.

        Args:
            cfg (dict): Configuration dictionary with default training settings from DEFAULT_CFG.
            overrides (dict, optional): Dictionary of parameter overrides for the default configuration.
            _callbacks (list, optional): List of callback functions to be applied during training.
        """
        ...
    
    def get_model(self, cfg=..., weights=..., verbose: bool = ...): # -> YOLOEModel:
        """
        Return a YOLOEModel initialized with the specified configuration and weights.

        Args:
            cfg (dict | str, optional): Model configuration. Can be a dictionary containing a 'yaml_file' key,
                a direct path to a YAML file, or None to use default configuration.
            weights (str | Path, optional): Path to pretrained weights file to load into the model.
            verbose (bool): Whether to display model information during initialization.

        Returns:
            (YOLOEModel): The initialized YOLOE model.

        Notes:
            - The number of classes (nc) is hard-coded to a maximum of 80 following the official configuration.
            - The nc parameter here represents the maximum number of different text samples in one image,
              rather than the actual number of classes.
        """
        ...
    
    def get_validator(self): # -> YOLOEDetectValidator:
        """Return a YOLOEDetectValidator for YOLOE model validation."""
        ...
    
    def build_dataset(self, img_path: str, mode: str = ..., batch: Optional[int] = ...): # -> YOLODataset | YOLOMultiModalDataset:
        """
        Build YOLO Dataset.

        Args:
            img_path (str): Path to the folder containing images.
            mode (str): 'train' mode or 'val' mode, users are able to customize different augmentations for each mode.
            batch (int, optional): Size of batches, this is for rectangular training.

        Returns:
            (Dataset): YOLO dataset configured for training or validation.
        """
        ...
    


class YOLOEPETrainer(DetectionTrainer):
    """
    Fine-tune YOLOE model using linear probing approach.

    This trainer freezes most model layers and only trains specific projection layers for efficient
    fine-tuning on new datasets while preserving pretrained features.

    Methods:
        get_model: Initialize YOLOEModel with frozen layers except projection layers.
    """
    def get_model(self, cfg=..., weights=..., verbose: bool = ...): # -> YOLOEModel:
        """
        Return YOLOEModel initialized with specified config and weights.

        Args:
            cfg (dict | str, optional): Model configuration.
            weights (str, optional): Path to pretrained weights.
            verbose (bool): Whether to display model information.

        Returns:
            (YOLOEModel): Initialized model with frozen layers except for specific projection layers.
        """
        ...
    


class YOLOETrainerFromScratch(YOLOETrainer, WorldTrainerFromScratch):
    """
    Train YOLOE models from scratch with text embedding support.

    This trainer combines YOLOE training capabilities with world training features, enabling
    training from scratch with text embeddings and grounding datasets.

    Methods:
        build_dataset: Build datasets for training with grounding support.
        preprocess_batch: Process batches with text features.
        generate_text_embeddings: Generate and cache text embeddings for training.
    """
    def build_dataset(self, img_path: Union[List[str], str], mode: str = ..., batch: Optional[int] = ...): # -> YOLODataset | YOLOMultiModalDataset | YOLOConcatDataset | GroundingDataset:
        """
        Build YOLO Dataset for training or validation.

        This method constructs appropriate datasets based on the mode and input paths, handling both
        standard YOLO datasets and grounding datasets with different formats.

        Args:
            img_path (List[str] | str): Path to the folder containing images or list of paths.
            mode (str): 'train' mode or 'val' mode, allowing customized augmentations for each mode.
            batch (int, optional): Size of batches, used for rectangular training/validation.

        Returns:
            (YOLOConcatDataset | Dataset): The constructed dataset for training or validation.
        """
        ...
    
    def preprocess_batch(self, batch): # -> Dict[Any, Any]:
        """Process batch for training, moving text features to the appropriate device."""
        ...
    
    def generate_text_embeddings(self, texts: List[str], batch: int, cache_dir: Path): # -> Any | dict[str, Any]:
        """
        Generate text embeddings for a list of text samples.

        Args:
            texts (List[str]): List of text samples to encode.
            batch (int): Batch size for processing.
            cache_dir (Path): Directory to save/load cached embeddings.

        Returns:
            (dict): Dictionary mapping text samples to their embeddings.
        """
        ...
    


class YOLOEPEFreeTrainer(YOLOEPETrainer, YOLOETrainerFromScratch):
    """
    Train prompt-free YOLOE model.

    This trainer combines linear probing capabilities with from-scratch training for prompt-free
    YOLOE models that don't require text prompts during inference.

    Methods:
        get_validator: Return standard DetectionValidator for validation.
        preprocess_batch: Preprocess batches without text features.
        set_text_embeddings: Set text embeddings for datasets (no-op for prompt-free).
    """
    def get_validator(self): # -> DetectionValidator:
        """Return a DetectionValidator for YOLO model validation."""
        ...
    
    def preprocess_batch(self, batch): # -> Dict[Any, Any]:
        """Preprocess a batch of images for YOLOE training, adjusting formatting and dimensions as needed."""
        ...
    
    def set_text_embeddings(self, datasets, batch: int): # -> None:
        """
        Set text embeddings for datasets to accelerate training by caching category names.

        This method collects unique category names from all datasets, generates text embeddings for them,
        and caches these embeddings to improve training efficiency. The embeddings are stored in a file
        in the parent directory of the first dataset's image path.

        Args:
            datasets (List[Dataset]): List of datasets containing category names to process.
            batch (int): Batch size for processing text embeddings.

        Notes:
            The method creates a dictionary mapping text samples to their embeddings and stores it
            at the path specified by 'cache_path'. If the cache file already exists, it will be loaded
            instead of regenerating the embeddings.
        """
        ...
    


class YOLOEVPTrainer(YOLOETrainerFromScratch):
    """
    Train YOLOE model with visual prompts.

    This trainer extends YOLOETrainerFromScratch to support visual prompt-based training,
    where visual cues are provided alongside images to guide the detection process.

    Methods:
        build_dataset: Build dataset with visual prompt loading transforms.
        preprocess_batch: Preprocess batches with visual prompts.
    """
    def build_dataset(self, img_path: Union[List[str], str], mode: str = ..., batch: Optional[int] = ...): # -> YOLOConcatDataset | YOLODataset | YOLOMultiModalDataset | GroundingDataset:
        """
        Build YOLO Dataset for training or validation with visual prompts.

        Args:
            img_path (List[str] | str): Path to the folder containing images or list of paths.
            mode (str): 'train' mode or 'val' mode, allowing customized augmentations for each mode.
            batch (int, optional): Size of batches, used for rectangular training/validation.

        Returns:
            (Dataset): YOLO dataset configured for training or validation, with visual prompts for training mode.
        """
        ...
    
    def preprocess_batch(self, batch): # -> Dict[Any, Any]:
        """Preprocess a batch of images for YOLOE training, moving visual prompts to the appropriate device."""
        ...
    


