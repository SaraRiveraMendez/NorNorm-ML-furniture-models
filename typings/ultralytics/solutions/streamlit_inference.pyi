"""
This type stub file was generated by pyright.
"""

from typing import Any

class Inference:
    """
    A class to perform object detection, image classification, image segmentation and pose estimation inference.

    This class provides functionalities for loading models, configuring settings, uploading video files, and performing
    real-time inference using Streamlit and Ultralytics YOLO models.

    Attributes:
        st (module): Streamlit module for UI creation.
        temp_dict (dict): Temporary dictionary to store the model path and other configuration.
        model_path (str): Path to the loaded model.
        model (YOLO): The YOLO model instance.
        source (str): Selected video source (webcam or video file).
        enable_trk (bool): Enable tracking option.
        conf (float): Confidence threshold for detection.
        iou (float): IoU threshold for non-maximum suppression.
        org_frame (Any): Container for the original frame to be displayed.
        ann_frame (Any): Container for the annotated frame to be displayed.
        vid_file_name (str | int): Name of the uploaded video file or webcam index.
        selected_ind (List[int]): List of selected class indices for detection.

    Methods:
        web_ui: Set up the Streamlit web interface with custom HTML elements.
        sidebar: Configure the Streamlit sidebar for model and inference settings.
        source_upload: Handle video file uploads through the Streamlit interface.
        configure: Configure the model and load selected classes for inference.
        inference: Perform real-time object detection inference.

    Examples:
        Create an Inference instance with a custom model
        >>> inf = Inference(model="path/to/model.pt")
        >>> inf.inference()

        Create an Inference instance with default settings
        >>> inf = Inference()
        >>> inf.inference()
    """
    def __init__(self, **kwargs: Any) -> None:
        """
        Initialize the Inference class, checking Streamlit requirements and setting up the model path.

        Args:
            **kwargs (Any): Additional keyword arguments for model configuration.
        """
        ...
    
    def web_ui(self) -> None:
        """Set up the Streamlit web interface with custom HTML elements."""
        ...
    
    def sidebar(self) -> None:
        """Configure the Streamlit sidebar for model and inference settings."""
        ...
    
    def source_upload(self) -> None:
        """Handle video file uploads through the Streamlit interface."""
        ...
    
    def configure(self) -> None:
        """Configure the model and load selected classes for inference."""
        ...
    
    def image_inference(self) -> None:
        """Perform inference on uploaded images."""
        ...
    
    def inference(self) -> None:
        """Perform real-time object detection inference on video or webcam feed."""
        ...
    


if __name__ == "__main__":
    args = ...
    model = ...
