"""
This type stub file was generated by pyright.
"""

"""Base callbacks for Ultralytics training, validation, prediction, and export processes."""
def on_pretrain_routine_start(trainer): # -> None:
    """Called before the pretraining routine starts."""
    ...

def on_pretrain_routine_end(trainer): # -> None:
    """Called after the pretraining routine ends."""
    ...

def on_train_start(trainer): # -> None:
    """Called when the training starts."""
    ...

def on_train_epoch_start(trainer): # -> None:
    """Called at the start of each training epoch."""
    ...

def on_train_batch_start(trainer): # -> None:
    """Called at the start of each training batch."""
    ...

def optimizer_step(trainer): # -> None:
    """Called when the optimizer takes a step."""
    ...

def on_before_zero_grad(trainer): # -> None:
    """Called before the gradients are set to zero."""
    ...

def on_train_batch_end(trainer): # -> None:
    """Called at the end of each training batch."""
    ...

def on_train_epoch_end(trainer): # -> None:
    """Called at the end of each training epoch."""
    ...

def on_fit_epoch_end(trainer): # -> None:
    """Called at the end of each fit epoch (train + val)."""
    ...

def on_model_save(trainer): # -> None:
    """Called when the model is saved."""
    ...

def on_train_end(trainer): # -> None:
    """Called when the training ends."""
    ...

def on_params_update(trainer): # -> None:
    """Called when the model parameters are updated."""
    ...

def teardown(trainer): # -> None:
    """Called during the teardown of the training process."""
    ...

def on_val_start(validator): # -> None:
    """Called when the validation starts."""
    ...

def on_val_batch_start(validator): # -> None:
    """Called at the start of each validation batch."""
    ...

def on_val_batch_end(validator): # -> None:
    """Called at the end of each validation batch."""
    ...

def on_val_end(validator): # -> None:
    """Called when the validation ends."""
    ...

def on_predict_start(predictor): # -> None:
    """Called when the prediction starts."""
    ...

def on_predict_batch_start(predictor): # -> None:
    """Called at the start of each prediction batch."""
    ...

def on_predict_batch_end(predictor): # -> None:
    """Called at the end of each prediction batch."""
    ...

def on_predict_postprocess_end(predictor): # -> None:
    """Called after the post-processing of the prediction ends."""
    ...

def on_predict_end(predictor): # -> None:
    """Called when the prediction ends."""
    ...

def on_export_start(exporter): # -> None:
    """Called when the model export starts."""
    ...

def on_export_end(exporter): # -> None:
    """Called when the model export ends."""
    ...

default_callbacks = ...
def get_default_callbacks(): # -> defaultdict[str, list[Any]]:
    """
    Get the default callbacks for Ultralytics training, validation, prediction, and export processes.

    Returns:
        (dict): Dictionary of default callbacks for various training events. Each key represents an event during the
            training process, and the corresponding value is a list of callback functions executed when that event
            occurs.

    Examples:
        >>> callbacks = get_default_callbacks()
        >>> print(list(callbacks.keys()))  # show all available callback events
        ['on_pretrain_routine_start', 'on_pretrain_routine_end', ...]
    """
    ...

def add_integration_callbacks(instance): # -> None:
    """
    Add integration callbacks to the instance's callbacks dictionary.

    This function loads and adds various integration callbacks to the provided instance. The specific callbacks added
    depend on the type of instance provided. All instances receive HUB callbacks, while Trainer instances also receive
    additional callbacks for various integrations like ClearML, Comet, DVC, MLflow, Neptune, Ray Tune, TensorBoard,
    and Weights & Biases.

    Args:
        instance (Trainer | Predictor | Validator | Exporter): The object instance to which callbacks will be added.
            The type of instance determines which callbacks are loaded.

    Examples:
        >>> from ultralytics.engine.trainer import BaseTrainer
        >>> trainer = BaseTrainer()
        >>> add_integration_callbacks(trainer)
    """
    ...

