"""
This type stub file was generated by pyright.
"""

import contextlib
from contextlib import contextmanager
from pathlib import Path
from typing import Union

class WorkingDirectory(contextlib.ContextDecorator):
    """
    A context manager and decorator for temporarily changing the working directory.

    This class allows for the temporary change of the working directory using a context manager or decorator.
    It ensures that the original working directory is restored after the context or decorated function completes.

    Attributes:
        dir (Path | str): The new directory to switch to.
        cwd (Path): The original current working directory before the switch.

    Methods:
        __enter__: Changes the current directory to the specified directory.
        __exit__: Restores the original working directory on context exit.

    Examples:
        Using as a context manager:
        >>> with WorkingDirectory('/path/to/new/dir'):
        >>> # Perform operations in the new directory
        >>>     pass

        Using as a decorator:
        >>> @WorkingDirectory('/path/to/new/dir')
        >>> def some_function():
        >>> # Perform operations in the new directory
        >>>     pass
    """
    def __init__(self, new_dir: Union[str, Path]) -> None:
        """Initialize the WorkingDirectory context manager with the target directory."""
        ...
    
    def __enter__(self): # -> None:
        """Change the current working directory to the specified directory upon entering the context."""
        ...
    
    def __exit__(self, exc_type, exc_val, exc_tb): # -> None:
        """Restore the original working directory when exiting the context."""
        ...
    


@contextmanager
def spaces_in_path(path: Union[str, Path]): # -> Generator[str | Path, Any, None]:
    """
    Context manager to handle paths with spaces in their names.

    If a path contains spaces, it replaces them with underscores, copies the file/directory to the new path, executes
    the context code block, then copies the file/directory back to its original location.

    Args:
        path (str | Path): The original path that may contain spaces.

    Yields:
        (Path | str): Temporary path with spaces replaced by underscores if spaces were present, otherwise the
            original path.

    Examples:
        >>> with spaces_in_path('/path/with spaces') as new_path:
        >>> # Your code here
        >>>     pass
    """
    ...

def increment_path(path: Union[str, Path], exist_ok: bool = ..., sep: str = ..., mkdir: bool = ...) -> Path:
    """
    Increment a file or directory path, i.e., runs/exp --> runs/exp{sep}2, runs/exp{sep}3, ... etc.

    If the path exists and `exist_ok` is not True, the path will be incremented by appending a number and `sep` to
    the end of the path. If the path is a file, the file extension will be preserved. If the path is a directory, the
    number will be appended directly to the end of the path.

    Args:
        path (str | Path): Path to increment.
        exist_ok (bool, optional): If True, the path will not be incremented and returned as-is.
        sep (str, optional): Separator to use between the path and the incrementation number.
        mkdir (bool, optional): Create a directory if it does not exist.

    Returns:
        (Path): Incremented path.

    Examples:
        Increment a directory path:
        >>> from pathlib import Path
        >>> path = Path("runs/exp")
        >>> new_path = increment_path(path)
        >>> print(new_path)
        runs/exp2

        Increment a file path:
        >>> path = Path("runs/exp/results.txt")
        >>> new_path = increment_path(path)
        >>> print(new_path)
        runs/exp/results2.txt
    """
    ...

def file_age(path: Union[str, Path] = ...) -> int:
    """Return days since the last modification of the specified file."""
    ...

def file_date(path: Union[str, Path] = ...) -> str:
    """Return the file modification date in 'YYYY-M-D' format."""
    ...

def file_size(path: Union[str, Path]) -> float:
    """Return the size of a file or directory in megabytes (MB)."""
    ...

def get_latest_run(search_dir: str = ...) -> str:
    """Return the path to the most recent 'last.pt' file in the specified directory for resuming training."""
    ...

def update_models(model_names: tuple = ..., source_dir: Path = ..., update_names: bool = ...): # -> None:
    """
    Update and re-save specified YOLO models in an 'updated_models' subdirectory.

    Args:
        model_names (tuple, optional): Model filenames to update.
        source_dir (Path, optional): Directory containing models and target subdirectory.
        update_names (bool, optional): Update model names from a data YAML.

    Examples:
        Update specified YOLO models and save them in 'updated_models' subdirectory:
        >>> from ultralytics.utils.files import update_models
        >>> model_names = ("yolo11n.pt", "yolov8s.pt")
        >>> update_models(model_names, source_dir=Path("/models"), update_names=True)
    """
    ...

